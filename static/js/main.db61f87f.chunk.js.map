{"version":3,"sources":["components/Footer.jsx","components/PageContent.jsx","router/constants/paths.js","utils/getTaskStyle.js","components/TodoTask.jsx","utils/getNumberOfTasksForStatus.js","components/TodoStatusCounter.jsx","components/TodoAddForm.jsx","components/TodoList.jsx","components/TodoTaskDetails.jsx","router/routes/Home.jsx","router/routes/Dummy.jsx","router/routes/NotFound.jsx","router/AppRoutes.js","components/App.js","constants/constants.js","utils/LocalStorage.js","store/store.js","reducers/AppReducer.jsx","index.js"],"names":["Footer","className","href","class","PageContent","props","Fragment","children","DUMMY_ROUTE","getTaskStyle","task","statusIcons","status","icon","color","deadlineIsExpired","compareAsc","Date","format","now","deadline","filter","TodoTask","dispatch","useDispatch","taskList","useSelector","state","todoTasksList","id","onClick","e","type","payload","target","title","stopPropagation","style","findIndex","parseInt","getNumberOfTasksForStatus","length","TodoStatusCounter","console","log","ref","domRef","TodoAddForm","useState","taskInputValue","setTaskInputValue","inputRef","useRef","handleSubmit","current","value","setHasBeenAdded","maxLength","onChange","onKeyDown","key","placeholder","TodoList","hasBeenAdded","openCountRef","closeCountRef","lateCountRef","tasksReactElement","map","useEffect","TodoTaskDetails","descriptionHasBeenSaved","setDescriptionHasBeenSaved","numberOfSaves","setNumberOfSaves","currentTask","selectedTask","currentTaskContent","undefined","description","descriptionInputValue","setDescriptionInputValue","classList","remove","add","DatePicker","label","newValue","renderInput","params","TextField","variant","sx","input","fontWeight","textAlign","Home","Dummy","NotFound","AppRoutes","path","element","App","LocalizationProvider","dateAdapter","AdapterDateFns","initialState","persistedState","serialState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","action","property","produce","draft","push","splice","date","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db61f87f.chunk.js","sourcesContent":["/* Attribution for home image\r\n<a href=\"https://www.vecteezy.com/free-vector/programming\">Programming Vectors by Vecteezy</a>*/\r\n\r\nimport '../styles/footer.scss'\r\nconst Footer = () => {\r\n    return <div className = 'footer'>\r\n        <a className = \"footer__icon-link\" href = 'https://www.linkedin.com/in/clementbenezech/'><i class=\"fab fa-linkedin\"></i></a>\r\n        <a className = \"footer__icon-link\" href = 'https://github.com/ClementBenezech'><i class=\"fab fa-github\"></i></a>\r\n        <a className = \"footer__icon-link\" href = 'mailto:clement.benezech@gmail.com'><i class=\"fas fa-paper-plane\"></i></a>\r\n    </div>\r\n}\r\n\r\nexport default Footer","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport '../styles/mainContent.scss'\r\n\r\n// This component always displays the header (including nav menu) and footer.\r\n// It also displays the components we have nested in it in the routes definitions. \r\n\r\nconst PageContent = (props) => {\r\n\r\n        return (\r\n                    <React.Fragment>\r\n                            \r\n                            <div className = \"main-content\">\r\n                                    {props.children}\r\n                            </div>\r\n                            <Footer/>\r\n                    </React.Fragment>\r\n\r\n\r\n        )\r\n\r\n}\r\n\r\nexport default PageContent","// Contain the paths definitions\r\n\r\nexport const HOME = \"/\"\r\n\r\nexport const NOT_FOUND = \"/*\"\r\n\r\nexport const DUMMY_ROUTE = \"/dummy_route\"","import format from \"date-fns/format\"\r\nimport compareAsc from \"date-fns/compareAsc\"\r\n\r\nexport const getTaskStyle = (task) => {\r\n\r\n    const statusIcons = [{status: \"open\", icon: \"far fa-clock\", color: '#9000fc'}, {status: \"close\", icon: \"far fa-check-circle\", color: 'limegreen'}  ]\r\n\r\n    const deadlineIsExpired = compareAsc(new Date((format(Date.now(), 'MM/dd/yyyy'))), new Date(task.deadline))\r\n    \r\n    if (deadlineIsExpired === 1 && task.status === 'close') {\r\n        return statusIcons.filter(icon => icon.status === task.status)[0]\r\n    } else if (deadlineIsExpired === 1 && task.status === 'open')  {\r\n        return {icon: \"fas fa-fire\", color: \"rgb(255, 83, 78)\"}\r\n    } else {\r\n        return statusIcons.filter(icon => icon.status === task.status)[0]\r\n    }\r\n}","import { useDispatch } from \"react-redux\";\r\nimport { getTaskStyle } from \"../utils/getTaskStyle\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n/*** This component takes a task as a props and returns a Task card JSX element.\r\n * @param { Object } task\r\n * @return { JSX.Element }\r\n */\r\n\r\nconst TodoTask = (props) => {\r\n                \r\n                const dispatch = useDispatch()\r\n                const task = props.task\r\n\r\n                const taskList = useSelector(state => state.todoTasksList)\r\n\r\n                return (\r\n                <div className = {'todo__task todo__task--'+task.status} key = {task.id} id = {task.id} onClick={(e) => {\r\n                                dispatch({type: 'todo/selectTask', payload: e.target.id})}} >\r\n                                <i title = {task.id} className=\"fas fa-minus-circle todo__task__delete-icon\" onClick = {(e) => {\r\n                                    e.stopPropagation();\r\n                                    dispatch({type: 'todo/deleteTask', payload: e.target.title})\r\n\r\n                                }}></i>\r\n                                <div id = {task.id+\"_title\"} className = \"todo__task__title\"  >{task.title}</div>\r\n                                <div id = {task.id+\"_status\"} className = {'todo__task__status todo__task__status--'+task.status} style = {{'background-color': getTaskStyle(task).color}} onClick = {(e)=> {\r\n                                dispatch({type: 'todo/toggleTaskStatus', payload: taskList.findIndex(task => task.id === parseInt(e.target.id))})\r\n                                }}>\r\n                                    <i id = {task.id} className={getTaskStyle(task).icon} ></i>\r\n                                </div>\r\n                </div>\r\n                )\r\n}\r\n\r\nexport default TodoTask","import compareAsc from 'date-fns/compareAsc'\r\nimport format from 'date-fns/format'\r\n\r\nexport const getNumberOfTasksForStatus = (status, taskList) => {\r\n    if (status === 'open') {\r\n        return taskList.filter(task => task.status === 'open' && compareAsc(new Date((format(Date.now(), 'MM/dd/yyyy'))), new Date(task.deadline)) !== 1).length\r\n    } else if (status === 'close') {\r\n        return taskList.filter(task => task.status === 'close').length\r\n    } else if (status === 'late') {\r\n        return taskList.filter(task => task.status === 'open' && compareAsc(new Date((format(Date.now(), 'MM/dd/yyyy'))), new Date(task.deadline)) === 1).length\r\n    }\r\n}","import { getNumberOfTasksForStatus } from \"../utils/getNumberOfTasksForStatus\"\r\n\r\n/**\r\n * @return {JSX.Element}\r\n */\r\n\r\nconst TodoStatusCounter = (props) => {\r\n    console.log(props)\r\n    return (\r\n                    <div className=\"todo__count-by-status\">\r\n                        <i className={props.icon+\" todo__count-by-status__icon\"} style ={{\"color\": props.color}}></i>\r\n                        <div ref = {props.domRef} key = {props.status+getNumberOfTasksForStatus(props.status, props.taskList)} className=\"todo__count-by-status__count\">{getNumberOfTasksForStatus(props.status, props.taskList)}</div>\r\n                    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TodoStatusCounter","import { useDispatch } from \"react-redux\"\r\nimport { useRef } from \"react\"\r\nimport { useState } from \"react\"\r\nimport '../styles/todo.scss'\r\n\r\nconst TodoAddForm = (props) => {\r\n\r\n    const [taskInputValue, setTaskInputValue] = useState('')\r\n    const inputRef = useRef()\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSubmit = () => {\r\n        if (taskInputValue !== '') {\r\n            inputRef.current.value = ''\r\n            setTaskInputValue('')\r\n            dispatch({type: 'todo/addTask', payload: taskInputValue})\r\n            props.setHasBeenAdded(true);\r\n            }\r\n    }\r\n\r\n    return (\r\n                <div className = \"todo__add-form\">\r\n                <input maxLength=\"32\" className = \"todo__title-input\" ref = {inputRef} onChange = {(e) => {\r\n                                        setTaskInputValue(e.target.value)\r\n                                }} \r\n\r\n                                onKeyDown= {(e)=> {\r\n                                    if (e.key === 'Enter') {\r\n                                        handleSubmit()\r\n                                    }\r\n                                }}\r\n\r\n                                placeholder=\"Enter task name here\"></input>\r\n\r\n                                <i className=\"fas fa-clipboard-list todo__icon\"></i>\r\n                                <i className=\"fas fa-arrow-right todo__icon\"></i>\r\n                                <i className=\"far fa-save todo__icon\"></i>\r\n\r\n                                <button className = \"todo__add-button\" onClick = {(e)=> {\r\n                                    handleSubmit()\r\n                                }}> Create Task</button>\r\n                                \r\n                </div>\r\n    )\r\n}\r\n\r\nexport default TodoAddForm","import { useSelector, useDispatch } from \"react-redux\"\r\nimport { useState, useRef } from \"react\"\r\nimport React from \"react\"\r\nimport '../styles/todo.scss'\r\nimport { useEffect } from \"react\"\r\nimport TodoTask from \"./TodoTask\"\r\nimport { getNumberOfTasksForStatus } from \"../utils/getNumberOfTasksForStatus\"\r\nimport TodoStatusCounter from \"./TodoStatusCounter\"\r\nimport TodoAddForm from \"./TodoAddForm\"\r\n\r\nconst TodoList = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const taskList = useSelector(state => state.todoTasksList)\r\n    const [hasBeenAdded, setHasBeenAdded] = useState(false)\r\n\r\n    const openCountRef = useRef()\r\n    const closeCountRef = useRef()\r\n    const lateCountRef = useRef()\r\n\r\n    const tasksReactElement = taskList.map(task => {\r\n        return( \r\n            <TodoTask key = {task.id} task = {task}/>\r\n        )\r\n    })\r\n\r\n    //This is used to select the last task whenever a new task has been added. \r\n    useEffect(()=>  {\r\n        if (hasBeenAdded === true) {\r\n                dispatch({type: 'todo/selectTask', payload: taskList[taskList.length-1].id})\r\n                setHasBeenAdded(false);\r\n        }\r\n    }, [hasBeenAdded])\r\n\r\n    useEffect(() => {\r\n        openCountRef.current.className = \"todo__count-by-status__count\";\r\n        lateCountRef.current.className = \"todo__count-by-status__count\";\r\n        closeCountRef.current.className = \"todo__count-by-status__count\";\r\n    } )\r\n\r\n    return (\r\n        <div className = \"todo\">\r\n                \r\n                <TodoAddForm setHasBeenAdded = {setHasBeenAdded}/>\r\n\r\n                <div className = \"todo__tasks\">\r\n                        {tasksReactElement}\r\n                </div>\r\n\r\n                <div className=\"todo__count-by-status__container\">\r\n                    <TodoStatusCounter status = 'open' taskList = {taskList} domRef = {openCountRef} getNumberOfTasksForStatus = {getNumberOfTasksForStatus} color= 'violet' icon = 'far fa-clock'/>\r\n                    <TodoStatusCounter status = 'late' taskList = {taskList} domRef = {lateCountRef} getNumberOfTasksForStatus = {getNumberOfTasksForStatus} color= 'red' icon = \"fas fa-fire\"/>\r\n                    <TodoStatusCounter status = 'close' taskList = {taskList} domRef = {closeCountRef} getNumberOfTasksForStatus = {getNumberOfTasksForStatus} color= 'limegreen' icon = 'fas fa-check-circle'/>\r\n                </div>               \r\n                \r\n        </div>\r\n    )\r\n}\r\nexport default TodoList","import { useSelector } from \"react-redux\"\r\nimport '../styles/todo.scss'\r\nimport { useDispatch } from \"react-redux\"\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport { TextField } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useRef, useEffect } from \"react\";\r\nimport {format} from 'date-fns'\r\nimport { getTaskStyle } from \"../utils/getTaskStyle\";\r\n\r\n/*** This component takes no props and returns a Task card JSX element.\r\n * It uses the state to identify and render the selected Task details.\r\n * @return { JSX.Element }\r\n */\r\n\r\n\r\nconst TodoTaskDetails = () => {\r\n\r\n    // Declaring a useDispatch hook to interact with the reducer.\r\n    const dispatch = useDispatch();\r\n    \r\n    /* Declaring localStates: \r\n    - a flag to indicate the description was just saved\r\n    - a \"number of times content was saved\" int value. Thiw will be used to generate a unique key for the description input*/\r\n    const [descriptionHasBeenSaved, setDescriptionHasBeenSaved] = useState(false)\r\n    const [numberOfSaves, setNumberOfSaves] = useState(0)\r\n    // Setting up useSelector hooks to subscribe to store updates\r\n    const currentTask = useSelector(state => state.selectedTask)\r\n    const todoTasksList = useSelector(state => state.todoTasksList)\r\n    const currentTaskContent = useSelector(state => state.todoTasksList.filter(task => task.id === parseInt(currentTask))[0])\r\n   \r\n    // Declaring a Ref to be able to access the task description field in the dom and handle side effects\r\n    const inputRef = useRef()\r\n    // Declaring a local state to control the description text field.\r\n    const [descriptionInputValue, setDescriptionInputValue] = useState(todoTasksList.filter(currentTaskContent !== undefined ? () => {return currentTaskContent.description} : () => {return ''}))\r\n    \r\n    // SIDE_EFFECT: Whenever the currentTaskContent changes, we update the description displayed by the dedicated input textarea.\r\n    useEffect(()=> {\r\n            if (currentTaskContent) {\r\n            setDescriptionInputValue(currentTaskContent.description)\r\n            }\r\n    }, [currentTaskContent])\r\n\r\n    //SIDE_EFFECT: Whenever a new description has been saved, provide the user with some feedback from the UI.\r\n    //The Textarea will 'bump' to indicate the content has been saved.\r\n    useEffect(() => {\r\n        if (descriptionHasBeenSaved === true) {\r\n            inputRef.current.classList.remove('todo__task-details__description--saved')\r\n            inputRef.current.classList.add('todo__task-details__description--saved')\r\n            setDescriptionHasBeenSaved(false)\r\n        }\r\n    },[descriptionHasBeenSaved])\r\n\r\n    //Only if there is there is a selected task with valid content in the state do we render content\r\n    if (currentTaskContent !== undefined) {\r\n        return <div className = \"todo__task-details\">\r\n                <div className = \"todo__task-details__title\">{currentTaskContent.title}</div>\r\n                \r\n                <div className = \"todo__task-details__information-container\">\r\n                <div className = \"todo__task-details__labels\">Deadline</div>\r\n                <DatePicker className = \"todo__task-details__deadline\"\r\n                label=\"\"\r\n                value={currentTaskContent.deadline}\r\n                onChange={(newValue) => {\r\n                    dispatch({type: 'todo/setTaskDeadLine', payload: {'id': currentTaskContent.id, 'date': format(newValue, 'MM/dd/yyyy') }})\r\n                }}\r\n                renderInput={(params) => <TextField variant=\"standard\" sx={{ input: { color: '#18003f', fontWeight:\"bold\", textAlign: 'center'}}} {...params} />}\r\n                />\r\n                    \r\n                </div>\r\n\r\n                <div className = \"todo__task-details__information-container\">\r\n                    <div className = \"todo__task-details__labels\">Status</div>\r\n                    <i className = {\"todo__task-details__status \"+ getTaskStyle(currentTaskContent).icon} style = {{'color': getTaskStyle(currentTaskContent).color}}></i>\r\n                    \r\n                </div>\r\n\r\n                <textarea key = {currentTaskContent.id+numberOfSaves} ref ={inputRef} value = {descriptionInputValue} type = \"text\" className = \"todo__task-details__description\" onChange = {(e) => {\r\n                    setDescriptionInputValue(e.target.value)\r\n                }}></textarea>\r\n\r\n                <button className = 'todo__task-details__submit-description' onClick = {()=> {\r\n                     dispatch({type: 'todo/setTaskDescription', payload: {'id': currentTaskContent.id, 'description': descriptionInputValue }})\r\n                     setNumberOfSaves(numberOfSaves + 1)\r\n                     setDescriptionHasBeenSaved(true)\r\n                }}><i class=\"far fa-save\"></i></button>\r\n\r\n                <button className = 'todo__task-details__deselect-task' onClick = {(e)=> {\r\n                    dispatch({type: 'todo/selectTask', payload: null})\r\n                }}><i class=\"far fa-times-circle\"></i></button>\r\n            </div>\r\n    } else {\r\n        //Meaning, no selected task content was found\r\n        return null\r\n    }\r\n\r\n    \r\n}\r\nexport default TodoTaskDetails","import PageContent from \"../../components/PageContent\"\r\nimport { HOME } from \"../constants/paths\"\r\nimport TodoList from \"../../components/TodoList\"\r\nimport TodoTaskDetails from \"../../components/TodoTaskDetails\"\r\n\r\nconst Home = () => {\r\n    return (\r\n      <PageContent key={HOME}>\r\n        <TodoList/>\r\n        <TodoTaskDetails/>\r\n      </PageContent>\r\n    )\r\n}\r\nexport default Home","import PageContent from \"../../components/PageContent\"\r\nimport { DUMMY_ROUTE } from \"../constants/paths\"\r\n\r\nconst Dummy = () => {\r\n    return (\r\n        <PageContent key={DUMMY_ROUTE}>\r\n        <div>You took the DUMMY route</div>\r\n      </PageContent>\r\n    )\r\n}\r\nexport default Dummy","import PageContent from \"../../components/PageContent\"\r\nimport { NOT_FOUND } from \"../constants/paths\"\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <PageContent key={NOT_FOUND}>\r\n        <div>You took the NOT_FOUND route</div>\r\n      </PageContent>\r\n    )\r\n}\r\nexport default NotFound","// Importing components needed to handle routing.\r\nimport { Route, Routes } from \"react-router-dom\"\r\n\r\n// Importing app components.\r\n\r\nimport PageContent from \"../components/PageContent.jsx\"\r\n\r\n// Importing other ressources (images...)\r\n\r\n// Importing PATH values (The definition of existing routes)\r\n\r\nimport { DUMMY_ROUTE } from \"./constants/paths.js\"\r\nimport { NOT_FOUND } from \"./constants/paths.js\"\r\nimport { HOME } from \"./constants/paths.js\"\r\n\r\n//Importing routes content\r\n\r\nimport Home from \"./routes/Home.jsx\"\r\nimport Dummy from \"./routes/Dummy.jsx\"\r\nimport NotFound from \"./routes/NotFound.jsx\"\r\n\r\nconst AppRoutes = () => {\r\n    return (\r\n            <Routes>\r\n                    <Route path={HOME} element={<Home/>} />\r\n                    \r\n                    <Route path={DUMMY_ROUTE} element={<Dummy/>} />\r\n\r\n                    <Route path={NOT_FOUND} element={<NotFound/>} />\r\n                       \r\n            </Routes>\r\n    )\r\n}\r\n            \r\nexport default AppRoutes","import '../styles/App.scss';\r\nimport AppRoutes from '../router/AppRoutes';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  \r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n    <div className=\"App\">\r\n        {<div>{AppRoutes()}</div>}\r\n    </div>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/*export const initialState = { todoTasksList: [{'id': 0, 'title': \"Manage my tasks\", 'description': \"Create some new tasks, assign deadlines and description. Tasks can be deleted, or flagged as completed\", 'status': 'open', 'deadline': \"02/05/1985\"}], selectedTask: '0'};*/\r\n\r\n\r\nexport const initialState = {\"todoTasksList\":[{\"id\":0,\"title\":\"Welcome to my React/Redux based\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"open\",\"deadline\":\"01/03/2022\"},{\"id\":1,\"title\":\"Task management app\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"close\",\"deadline\":\"01/03/2022\"},{\"id\":2,\"title\":\"It uses SCSS for styling\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"open\",\"deadline\":\"01/01/2022\"},{\"id\":3,\"title\":\"Datepicker is a courtesy of MUI\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"open\",\"deadline\":\"01/03/2022\"},{\"id\":4,\"title\":\"Create or delete tasks...\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"close\",\"deadline\":\"01/03/2022\"},{\"id\":5,\"title\":\"Define deadlines...\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"open\",\"deadline\":\"01/01/2022\"},{\"id\":6,\"title\":\"write a long description\",\"description\":\"You can add a description here, or set a Deadline for your task!\",\"status\":\"open\",\"deadline\":\"01/03/2022\"},{\"id\":7,\"title\":\"Track your progress :)\",\"description\":\"Hey there I'm Clement Benezech, I'm a React Developer!\\n\\nIf you like this App, feel free to check my portfolio :)\",\"status\":\"open\",\"deadline\":\"01/03/2022\"}],\"selectedTask\":\"2\"}","//This function will try to get any pre-existing state from the LocalStorage, and turn it back into a JSON object\r\n//If none exists, it will return undefined. \r\nexport const loadState = () => {\r\n  try {\r\n    const serialState = localStorage.getItem('appState');\r\n    if (serialState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serialState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n//This function takes the current state, turns it to string and saves it in localStorage.\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serialState = JSON.stringify(state);\r\n    localStorage.setItem('appState', serialState);\r\n  } catch(err) {\r\n      console.log(err);\r\n  }\r\n};\r\n","import { createStore } from 'redux'\r\nimport AppReducer from \"../reducers/AppReducer\"\r\nimport {loadState} from \"../utils/LocalStorage\"\r\n\r\n/*//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());*/\r\n\r\n\r\n\r\n//Getting the persisted state from LocalStorage (Loadstate is declared in LocalStorage.js)\r\nconst persistedState = loadState()\r\n\r\n//Create the store. It will have the default values from the reducer, unless a persisted state exists.\r\nlet store = createStore(AppReducer, persistedState)\r\n\r\n/*export default store*/\r\nexport default store","import produce from 'immer';\r\nimport { initialState } from '../constants/constants';\r\nimport format from 'date-fns/format'\r\n\r\n\r\n   // Use the initialState as a default value\r\n   export default function AppReducer(state = initialState, action) {\r\n     // The reducer normally looks at the action type field to decide what happens  \r\n     switch (action.type) {  \r\n        //Normal Update\r\n        case 'Something/doSomething' : {\r\n           return {\r\n                ...state,\r\n                    property: action.payload\r\n            }\r\n        }\r\n\r\n        //Update with immer\r\n        case 'something/doSomething' : {\r\n            return produce(state, draft => {\r\n                draft.property = action.payload\r\n            })   \r\n        }\r\n\r\n        //Adding new task\r\n        case 'todo/addTask' : {\r\n            return produce(state, draft => {\r\n                draft.todoTasksList.push({'id': state.todoTasksList.length, 'title': action.payload, 'description': \"You can add a description here, or set a Deadline for your task!\", 'status': 'open', deadline: format(Date.now(), 'MM/dd/yyyy') })\r\n            })   \r\n        }\r\n\r\n        //Changing task status\r\n        case 'todo/toggleTaskStatus' : {\r\n            return produce(state, draft => {\r\n                if (state.todoTasksList[action.payload].status === 'open') {\r\n                    draft.todoTasksList[action.payload].status = 'close'\r\n                } else {\r\n                    draft.todoTasksList[action.payload].status = 'open'\r\n                }\r\n                \r\n            })   \r\n        }\r\n\r\n        //Delete task\r\n        case 'todo/deleteTask' : {\r\n            \r\n            return produce(state, draft => {\r\n                draft.todoTasksList.splice(state.todoTasksList.findIndex(task => task.id === parseInt(action.payload)), 1)\r\n            })   \r\n        }\r\n\r\n        //Select the current selected task\r\n        case 'todo/selectTask' : {\r\n            return produce(state, draft => {\r\n                draft.selectedTask = action.payload;\r\n            })   \r\n        }\r\n\r\n        //Select the current selected task\r\n        case 'todo/setTaskDeadLine' : {\r\n            return produce(state, draft => {              \r\n                draft.todoTasksList[state.todoTasksList.findIndex(task => task.id === parseInt(action.payload.id))].deadline = action.payload.date\r\n            })   \r\n        }\r\n\r\n        //Select the current selected task\r\n        case 'todo/setTaskDescription' : {\r\n            return produce(state, draft => {              \r\n                draft.todoTasksList[state.todoTasksList.findIndex(task => task.id === parseInt(action.payload.id))].description = action.payload.description\r\n            })   \r\n        }\r\n\r\n        \r\n        \r\n\r\n       default:      \r\n       // If this reducer doesn't recognize the action type, or doesn't      \r\n       // care about this specific action, return the existing state unchanged \r\n       return state \r\n   }}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport {saveState} from \"./utils/LocalStorage\"\r\n\r\n//Saving the store state into localStorage (saveState is declared in LocalSorage.js)\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}